package ru.sergeyb.dump;

import java.io.IOException;

/**
 * JMX интерфейс сервиса, записывающего дампы потоков
 *
 * @author sergeyb
 */
public interface ThreadDumpMBean {

    /**
     * Возвращает период создания дампов в секундах.
     *
     * @return период создания дампов в секундах
     */
    int getPeriodSec();

    /**
     * Устанавливает период создания дампов в секундах.
     *
     * @param periodSec период создания дампов в секундах
     */
    void setPeriodSec(int periodSec);

    /**
     * Возвращает путь к каталогу, куда сохраняются файлы с дампами.
     *
     * @return путь к каталогу, куда сохраняются файлы с дампами
     */
    String getDumpDir();

    /**
     * Устанавливает путь к каталогу, куда сохраняются файлы с дампами.
     *
     * @param dumpDir путь к каталогу, куда сохраняются файлы с дампами
     */
    void setDumpDir(String dumpDir);

    /**
     * Возвращает имя типа создаваемого дампа.
     *
     * @return имя типа создаваемого дампа
     */
    String getDumpType();

    /**
     * Устанавливает имя типа создаваемого дампа.
     *
     * @param dumpType имя типа создаваемого дампа
     */
    void setDumpType(String dumpType);

    /**
     * Возвращает период вызова процедуры очистки старых дампов в секундах.
     *
     * @return период вызова процедуры очистки старых дампов в секундах
     */
    int getRotatePeriodSec();

    /**
     * Устанавливает период вызова процедуры очистки старых дампов в секундах.
     *
     * @param rotatePeriod период вызова процедуры очистки старых дампов в секундах
     */
    void setRotatePeriodSec(int rotatePeriod);

    /**
     * Возвращает количество дней, после которых дампы подлежат удалению.
     *
     * @return количество дней, после которых дампы подлежат удалению
     */
    int getRotateDays();

    /**
     * Устанавливает количество дней, после которых дампы подлежат удалению.
     *
     * @param rotateDays количество дней, после которых дампы подлежат удалению
     */
    void setRotateDays(int rotateDays);

    /**
     * Возвращает список доступных типов дампов.
     *
     * @return список доступных типов дампов
     */
    String[] getAvailableDumpTypes();

    /**
     * Сбрасывает путь к каталогу с дампами на значение по умолчанию.
     */
    void resetDumpDir();

    /**
     * Сбрасывает период сохранения файлов с дампами на значение по умолчанию.
     */
    void resetPeriod();

    /**
     * Сбрасывает период вызова очистки старых файлов с дампами на значение по умолчанию.
     */
    void resetRotatePeriod();

    /**
     * Сбрасывает срок хранения файлов с дампами на значение по умолчанию.
     */
    void resetRotateDays();

    /**
     * Возвращает <code>true</code>, если сервис запущен.
     *
     * @return <code>true</code>, если сервис запущен
     */
    boolean isStarted();

    /**
     * Запускает сервис.
     */
    void start();

    /**
     * Останавливает сервис.
     */
    void stop();

    /**
     * Создает новый дамп потоков.
     */
    void threadDump();

    /**
     * Создает дамп потоков в указанном файле.
     *
     * @param file имя файла, в котором будет сохранен дамп
     * @throws IOException в случае ошибки записи в файл
     */
    void threadDump(String file) throws IOException;

    /**
     * Производит удаление старых файлов с дампами.
     */
    void rotate();

}
